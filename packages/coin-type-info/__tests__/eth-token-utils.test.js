
const ethTokenUtils = require('../lib/eth-token-utils')

describe('eth-token-utils', () => {
  test('knows tokens', () => {
    expect(ethTokenUtils.isToken("1ST")).toEqual(true)
    expect(ethTokenUtils.isToken("ANT")).toEqual(true)
    expect(ethTokenUtils.isToken("BAT")).toEqual(true)
    expect(ethTokenUtils.isToken("BNT")).toEqual(true)
    expect(ethTokenUtils.isToken("CVC")).toEqual(true)
    expect(ethTokenUtils.isToken("DGD")).toEqual(true)
    expect(ethTokenUtils.isToken("DNT")).toEqual(true)
    expect(ethTokenUtils.isToken("EDG")).toEqual(true)
    expect(ethTokenUtils.isToken("EOS")).toEqual(true)
    expect(ethTokenUtils.isToken("FUN")).toEqual(true)
    expect(ethTokenUtils.isToken("GNO")).toEqual(true)
    expect(ethTokenUtils.isToken("GNT")).toEqual(true)
    expect(ethTokenUtils.isToken("GUP")).toEqual(true)
    expect(ethTokenUtils.isToken("ICN")).toEqual(true)
    expect(ethTokenUtils.isToken("MLN")).toEqual(true)
    expect(ethTokenUtils.isToken("MTL")).toEqual(true)
    expect(ethTokenUtils.isToken("NMR")).toEqual(true)
    expect(ethTokenUtils.isToken("OMG")).toEqual(true)
    expect(ethTokenUtils.isToken("PAY")).toEqual(true)
    expect(ethTokenUtils.isToken("QTUM")).toEqual(true)
    expect(ethTokenUtils.isToken("RCN")).toEqual(true)
    expect(ethTokenUtils.isToken("REP")).toEqual(true)
    expect(ethTokenUtils.isToken("RLC")).toEqual(true)
    expect(ethTokenUtils.isToken("SALT")).toEqual(true)
    expect(ethTokenUtils.isToken("SNGLS")).toEqual(true)
    expect(ethTokenUtils.isToken("SNT")).toEqual(true)
    expect(ethTokenUtils.isToken("STORJ")).toEqual(true)
    expect(ethTokenUtils.isToken("SWT")).toEqual(true)
    expect(ethTokenUtils.isToken("TKN")).toEqual(true)
    expect(ethTokenUtils.isToken("TRST")).toEqual(true)
    expect(ethTokenUtils.isToken("WINGS")).toEqual(true)
    expect(ethTokenUtils.isToken("ZRX")).toEqual(true)

    expect(ethTokenUtils.isToken("BTC")).toEqual(false)
  })

  test('known token addresses', () => {
    expect(ethTokenUtils.contractAddress("1ST")).toEqual("0xAf30D2a7E90d7DC361c8C4585e9BB7D2F6f15bc7".toLowerCase())
    expect(ethTokenUtils.contractAddress("ANT")).toEqual("0x960b236A07cf122663c4303350609A66A7B288C0".toLowerCase())
    expect(ethTokenUtils.contractAddress("BAT")).toEqual("0x0D8775F648430679A709E98d2b0Cb6250d2887EF".toLowerCase())
    expect(ethTokenUtils.contractAddress("BNT")).toEqual("0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C".toLowerCase())
    expect(ethTokenUtils.contractAddress("CVC")).toEqual("0x41e5560054824ea6b0732e656e3ad64e20e94e45".toLowerCase())
    expect(ethTokenUtils.contractAddress("DGD")).toEqual("0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A".toLowerCase())
    expect(ethTokenUtils.contractAddress("DNT")).toEqual("0x0abdace70d3790235af448c88547603b945604ea".toLowerCase())
    expect(ethTokenUtils.contractAddress("EDG")).toEqual("0x08711D3B02C8758F2FB3ab4e80228418a7F8e39c".toLowerCase())
    expect(ethTokenUtils.contractAddress("EOS")).toEqual("0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0".toLowerCase())
    expect(ethTokenUtils.contractAddress("FUN")).toEqual("0x419d0d8bdd9af5e606ae2232ed285aff190e711b".toLowerCase())
    expect(ethTokenUtils.contractAddress("GNO")).toEqual("0x6810e776880C02933D47DB1b9fc05908e5386b96".toLowerCase())
    expect(ethTokenUtils.contractAddress("GNT")).toEqual("0xa74476443119A942dE498590Fe1f2454d7D4aC0d".toLowerCase())
    expect(ethTokenUtils.contractAddress("GUP")).toEqual("0xf7b098298f7c69fc14610bf71d5e02c60792894c".toLowerCase())
    expect(ethTokenUtils.contractAddress("ICN")).toEqual("0x888666CA69E0f178DED6D75b5726Cee99A87D698".toLowerCase())
    expect(ethTokenUtils.contractAddress("MLN")).toEqual("0xBEB9eF514a379B997e0798FDcC901Ee474B6D9A1".toLowerCase())
    expect(ethTokenUtils.contractAddress("MTL")).toEqual("0xF433089366899D83a9f26A773D59ec7eCF30355e".toLowerCase())
    expect(ethTokenUtils.contractAddress("NMR")).toEqual("0x1776e1F26f98b1A5dF9cD347953a26dd3Cb46671".toLowerCase())
    expect(ethTokenUtils.contractAddress("OMG")).toEqual("0xd26114cd6EE289AccF82350c8d8487fedB8A0C07".toLowerCase())
    expect(ethTokenUtils.contractAddress("PAY")).toEqual("0xB97048628DB6B661D4C2aA833e95Dbe1A905B280".toLowerCase())
    expect(ethTokenUtils.contractAddress("QTUM")).toEqual("0x9a642d6b3368ddc662CA244bAdf32cDA716005BC".toLowerCase())
    expect(ethTokenUtils.contractAddress("RCN")).toEqual("0xf970b8e36e23f7fc3fd752eea86f8be8d83375a6".toLowerCase())
    expect(ethTokenUtils.contractAddress("REP")).toEqual("0xE94327D07Fc17907b4DB788E5aDf2ed424adDff6".toLowerCase())
    expect(ethTokenUtils.contractAddress("RLC")).toEqual("0x607F4C5BB672230e8672085532f7e901544a7375".toLowerCase())
    expect(ethTokenUtils.contractAddress("SALT")).toEqual("0x4156D3342D5c385a87D264F90653733592000581".toLowerCase())
    expect(ethTokenUtils.contractAddress("SNGLS")).toEqual("0xaec2e87e0a235266d9c5adc9deb4b2e29b54d009".toLowerCase())
    expect(ethTokenUtils.contractAddress("SNT")).toEqual("0x744d70FDBE2Ba4CF95131626614a1763DF805B9E".toLowerCase())
    expect(ethTokenUtils.contractAddress("STORJ")).toEqual("0xb64ef51c888972c908cfacf59b47c1afbc0ab8ac".toLowerCase())
    expect(ethTokenUtils.contractAddress("SWT")).toEqual("0xb9e7f8568e08d5659f5d29c4997173d84cdf2607".toLowerCase())
    expect(ethTokenUtils.contractAddress("TKN")).toEqual("0xaaaf91d9b90df800df4f55c205fd6989c977e73a".toLowerCase())
    expect(ethTokenUtils.contractAddress("TRST")).toEqual("0xCb94be6f13A1182E4A4B6140cb7bf2025d28e41B".toLowerCase())
    expect(ethTokenUtils.contractAddress("WINGS")).toEqual("0x667088b212ce3d06a1b553a7221E1fD19000d9aF".toLowerCase())
    expect(ethTokenUtils.contractAddress("ZRX")).toEqual("0xE41d2489571d322189246DaFA5ebDe1F4699F498".toLowerCase())
  })

  test('knows token bases', () => {
    expect(ethTokenUtils.baseForToken("1ST")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("ANT")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("BAT")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("BNT")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("CVC")).toEqual(100000000)
    expect(ethTokenUtils.baseForToken("DGD")).toEqual(1000000000)
    expect(ethTokenUtils.baseForToken("DNT")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("EDG")).toEqual(1)
    expect(ethTokenUtils.baseForToken("EOS")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("FUN")).toEqual(100000000)
    expect(ethTokenUtils.baseForToken("GNO")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("GNT")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("GUP")).toEqual(1000)
    expect(ethTokenUtils.baseForToken("ICN")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("MLN")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("MTL")).toEqual(100000000)
    expect(ethTokenUtils.baseForToken("NMR")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("OMG")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("PAY")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("QTUM")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("RCN")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("REP")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("RLC")).toEqual(1000000000)
    expect(ethTokenUtils.baseForToken("SALT")).toEqual(100000000)
    expect(ethTokenUtils.baseForToken("SNGLS")).toEqual(1)
    expect(ethTokenUtils.baseForToken("SNT")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("STORJ")).toEqual(100000000)
    expect(ethTokenUtils.baseForToken("SWT")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("TKN")).toEqual(100000000)
    expect(ethTokenUtils.baseForToken("TRST")).toEqual(1000000)
    expect(ethTokenUtils.baseForToken("WINGS")).toEqual(1000000000000000000)
    expect(ethTokenUtils.baseForToken("ZRX")).toEqual(1000000000000000000)
  })
})
